openapi: 3.0.2
info:
    title: BlowLTD's BDT Payment API
    version: V1
    contact:
        name: José Mendonça
        email: jnl.mendonca@gmail.com
        url: https://www.blowltd.com/
    description: |
        # BlowLTD's Backend Developer Test API
        This API is the answer to BlowLTD's Backend Developer Test. It represents part of a payments system API.
    
        ## Requirements
        - API should be RESTFUL
        - API should be able to
            - Fetch a payment resource
            - Create, update and delete a payment resource
            - List a collection of payment resources
            - Persist resource state (e.g. to a database)

servers:
    - url: http://localhost:3000
      description: Test server. Will run inside docker container and be exposed on port 3000.

components:
    schemas:
        Error:
            type: object
            description: Error object. Used in error responses that require extra details.
            properties:
                message:
                    type: string
                type:
                    type: string
                code:
                    type: string
            example:
                message: Invalid "payment scheme type"
                type: InvalidParameterException
                code: 123

        Id:
            type: string
            description: Id string. Contains the pattern for allowed IDs (UUID v4).
            readOnly: true
            pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'
            example:
                531de458-876f-42fe-856b-4821889c44d2 

        Currency:
            type: string
            description: Currency enumerator. Contains allowed values for currency type.
            enum:
             - GBP
             - EUR
             - USD

        PaymentSchemeType:
            type: string
            description: Payment Scheme Type enumerator.
            enum:
             - FPS

        PaymentType:
            type: string
            description: Payment Type enumerator.
            enum:
             - Credit

        SchemePaymentType:
            type: string
            description: Scheme Payment Type enumerator.
            enum:
             - ImmediatePayment
        
        SchemePaymentSubType:
            type: string
            description: Scheme Payment Sub-Type enumerator.
            enum:
             - InternetBanking

        Payment:
            type: object
            description: Payment object. Main API resource.
            properties:
                id:
                    $ref: '#/components/schemas/Id'
                version:
                    type: number
                organisation_id:
                    $ref: '#/components/schemas/Id'
                attributes:
                    $ref: '#/components/schemas/PaymentAttributes'
            example:
                id: 4ee3a8d8-ca7b-4290-a52c-dd5b6165ec43
                organisation_id: 743d5b63-8e6f-432e-a8fa-c5d8d2ee5fcb
                version: 0
                attributes:
                    $ref: '#/components/schemas/PaymentAttributes/example'

        PaymentAttributes:
            type: object
            description: Payment Attributes object. Contains most of the information related to a payment.
            properties:
                amount:
                    type: number
                    description: Amount paid
                    minimum: 0
                currency:   # Currency of the payment
                    $ref: '#/components/schemas/Currency'
                beneficiary_party_id:   # ID of the beneficiary party. Replaces all the retails pertaining to the beneficiary_party.
                    $ref: '#/components/schemas/Id'
                debtor_party_id:    # ID of the debtor party. Replaces all the retails pertaining to the debtor_party.
                    $ref: '#/components/schemas/Id'
                sponsor_party_id:   # ID of the sponsor party. Replaces all the retails pertaining to the sponsor_party.
                    $ref: '#/components/schemas/Id'
                payment_scheme_type:
                    $ref: '#/components/schemas/PaymentSchemeType'
                payment_type:
                    $ref: '#/components/schemas/PaymentType'
                scheme_payment_type:
                    $ref: '#/components/schemas/SchemePaymentType'
                scheme_payment_sub_type:
                    $ref: '#/components/schemas/SchemePaymentSubType'
                reference:
                    type: string
                    nullable: true
                payment_purpose:
                    type: string
                    nullable: true
                end_to_end_reference:
                    type: string
                    nullable: true
                processing_timestamp:
                    type: number
                    description: Timestamp for the payment's processing operation. Replaces the processing_date string.
                numeric_reference:
                    type: string
                    pattern: '^[0-9]+$'
                payment_id:
                    type: string
                    pattern: '^[0-9]+$'
            example:
                amount: 123.45
                currency: GBP
                beneficiary_party_id: 11998de5-2b6a-44ae-a281-98794c539ec7
                debtor_party_id: db8e6fe6-1dd0-4b32-a0cc-9a96085bc88b
                sponsor_party_id: 013f1dfc-f1c3-4ed8-b9f3-2d8b78154f96
                payment_scheme_type: FPS
                payment_type: Credit
                scheme_payment_type: ImmediatePayment
                scheme_payment_sub_type: InternetBanking
                reference: Payment for Em's piano lessons
                numeric_reference: 123456789
                payment_id: 123456789012345
                payment_purpose: Paying for goods/services
                end_to_end_reference: Wil piano Jan
                processing_timestamp: 1566998801878

paths:
    /payments:
        get:
            summary: Returns a list of payments.
            description: Returns a list of the payments in the database.
            parameters:
                - name: limit
                  description: The maximum number of payments to return in the response
                  in: query
                  required: false
                  schema:
                    type: integer
                    minimum: 1
                    maximum: 50
                    default: 10
                - name: offset
                  description: The number of payments to skip before returning the response
                  in: query
                  required: false
                  schema:
                    type: integer
                    minimum: 0
                    default: 0
            responses:
                '200':
                    description: A JSON array of payments.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Payment'
                '500':
                    description: A server error occurred while processing request.

        post:
            summary: Creates a payment.
            description: Creates a payment with the parameters sent in the request's body. Returns the payment details if successful.
            requestBody:
                description: The JSON detail of the payment
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Payment'
            responses:
                '201':
                    description: A JSON detail of the payment. The creation was successful.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Payment'
                '400':
                    description: Payment creation failed. Client input is not valid.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                '500':
                    description: A server error occurred while processing request.

    /payments/{id}:
        get:
            summary: Returns a payment.
            description: Returns a single payment from the database, if it exists and matches the provided ID.
            parameters:
                - name: id
                  description: The payment ID
                  in: path
                  required: true
                  schema:
                    $ref: '#/components/schemas/Id'
            responses:
                '200':
                    description: A JSON detail of the payment.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Payment'
                '404':
                    description: No payment matching the provided ID exists in the database.
                '500':
                    description: A server error occurred while processing request.

        delete:
            summary: Delete a payment.
            description: Deletes a payment matching the provided ID, from the database, if it exists.
            parameters:
                - name: id
                  description: The payment ID
                  in: path
                  required: true
                  schema:
                    $ref: '#/components/schemas/Id'
            responses:
                '204':
                    description: Payment was deleted.
                '404':
                    description: No payment matching the provided ID exists in the database.
                '500':
                    description: A server error occurred while processing request.

        patch:
            summary: Update a payment.
            description: Updates a payment matching the provided ID, in the database, if it exists.
            parameters:
                - name: id
                  description: The payment ID
                  in: path
                  required: true
                  schema:
                    $ref: '#/components/schemas/Id'
            responses:
                '200':
                    description: A JSON detail of the payment.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Payment'
                '400':
                    description: Payment update failed. Client input is not valid.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                '404':
                    description: No payment matching the provided ID exists in the database.
                '500':
                    description: A server error occurred while processing request.
